{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";import{getMessages,openRoom,saveMessage}from\"../../features/messages/messages.service\";var initialState={chatRooms:{},loading:false,error:null};export var messagesSlice=createSlice({name:\"messages\",initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(openRoom.pending,function(state){state.loading=true;state.error=null;}).addCase(openRoom.fulfilled,function(state,action){state.loading=false;var _action$payload=action.payload,chatRoom=_action$payload.chatRoom,messages=_action$payload.messages,host=_action$payload.host,guest=_action$payload.guest;if(!state.chatRooms[chatRoom]){state.chatRooms[chatRoom]={host:null,guest:null,messages:[]};}state.chatRooms[chatRoom].messages=messages;state.chatRooms[chatRoom].host=host;state.chatRooms[chatRoom].guest=guest;state.error=null;}).addCase(openRoom.rejected,function(state,action){state.loading=false;state.error=action.error.message;}).addCase(saveMessage.pending,function(state){state.loading=true;state.error=null;}).addCase(saveMessage.fulfilled,function(state,action){console.log(action.payload);state.loading=false;var _action$payload2=action.payload,chatRoom=_action$payload2.chatRoom,messages=_action$payload2.messages,host=_action$payload2.host,guest=_action$payload2.guest;if(!state.chatRooms[chatRoom]){state.chatRooms[chatRoom]={host:null,guest:null,messages:[]};}state.chatRooms[chatRoom].messages=messages;state.chatRooms[chatRoom].host=host;state.chatRooms[chatRoom].guest=guest;state.error=null;}).addCase(saveMessage.rejected,function(state,action){state.loading=false;state.error=action.error.message;}).addCase(getMessages.pending,function(state){state.loading=true;state.error=null;}).addCase(getMessages.fulfilled,function(state,action){state.loading=false;var _action$payload3=action.payload,chatRoom=_action$payload3.chatRoom,messages=_action$payload3.messages,host=_action$payload3.host,guest=_action$payload3.guest;if(!state.chatRooms[chatRoom]){state.chatRooms[chatRoom]={host:null,guest:null,messages:[]};}state.chatRooms[chatRoom].messages=messages;state.chatRooms[chatRoom].host=host;state.chatRooms[chatRoom].guest=guest;state.error=null;}).addCase(getMessages.rejected,function(state,action){state.loading=false;state.error=action.error.message;});}});export var selectMessageState=function selectMessageState(state){return state.messages;};export var selectLoading=function selectLoading(state){return state.messages.loading;};export var selectError=function selectError(state){return state.messages.error;};//export const selectRoom = (state: RootState) => state.messages.chatRoom;\n//export const selectMessages = (state: RootState) => state.messages.messages;\n//export const selectCreator = (state: RootState) => state.messages.host;\n//export const selectGuest = (state: RootState) => state.messages.guest;\nexport var selectChatRoom=function selectChatRoom(state){return state.messages.chatRooms;};export default messagesSlice.reducer;","map":{"version":3,"names":["createSlice","getMessages","openRoom","saveMessage","initialState","chatRooms","loading","error","messagesSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","_action$payload","payload","chatRoom","messages","host","guest","rejected","message","console","log","_action$payload2","_action$payload3","selectMessageState","selectLoading","selectError","selectChatRoom","reducer"],"sources":["/Users/pablogrillo/Desktop/losty-web/client/src/store/features/messageSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport type { PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"..\";\nimport { MessagesResponse, getMessages, openRoom, saveMessage } from \"../../features/messages/messages.service\";\n\nexport interface ChatRoom {\n    host: string | null;\n    guest: string | null;\n    messages: { from: string; text: string }[];\n}\n\nexport interface MessagesState {\n    chatRooms: Record<string, ChatRoom>; // Object containing chat rooms with their IDs as keys\n    loading: boolean;\n    error: string | null;\n}\n\nconst initialState: MessagesState = {\n    chatRooms: {},\n    loading: false,\n    error: null,\n};\n\nexport const messagesSlice = createSlice({\n    name: \"messages\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n            .addCase(openRoom.pending, (state) => {\n                state.loading = true;\n                state.error = null;\n            })\n            .addCase(openRoom.fulfilled, (state, action: PayloadAction<MessagesResponse>) => {\n                state.loading = false;\n                const { chatRoom, messages, host, guest } = action.payload;\n                if (!state.chatRooms[chatRoom]) {\n                    state.chatRooms[chatRoom] = {\n                        host: null,\n                        guest: null,\n                        messages: [],\n                    };\n                }\n                state.chatRooms[chatRoom].messages = messages;\n                state.chatRooms[chatRoom].host = host;\n                state.chatRooms[chatRoom].guest = guest;\n                state.error = null;\n            })\n            .addCase(openRoom.rejected, (state, action) => {\n                state.loading = false;\n                state.error = action.error.message as string;\n            })\n            .addCase(saveMessage.pending, (state) => {\n                state.loading = true;\n                state.error = null;\n            })\n            .addCase(saveMessage.fulfilled, (state, action: PayloadAction<any>) => {\n                console.log(action.payload);\n                state.loading = false;\n                const { chatRoom, messages, host, guest } = action.payload;\n                if (!state.chatRooms[chatRoom]) {\n                    state.chatRooms[chatRoom] = {\n                        host: null,\n                        guest: null,\n                        messages: [],\n                    };\n                }\n                state.chatRooms[chatRoom].messages = messages;\n                state.chatRooms[chatRoom].host = host;\n                state.chatRooms[chatRoom].guest = guest;\n                state.error = null;\n            })\n            .addCase(saveMessage.rejected, (state, action) => {\n                state.loading = false;\n                state.error = action.error.message as string;\n            })\n            .addCase(getMessages.pending, (state) => {\n                state.loading = true;\n                state.error = null;\n            })\n            .addCase(getMessages.fulfilled, (state, action) => {\n                state.loading = false;\n                const { chatRoom, messages, host, guest } = action.payload;\n                if (!state.chatRooms[chatRoom]) {\n                    state.chatRooms[chatRoom] = {\n                        host: null,\n                        guest: null,\n                        messages: [],\n                    };\n                }\n                state.chatRooms[chatRoom].messages = messages;\n                state.chatRooms[chatRoom].host = host;\n                state.chatRooms[chatRoom].guest = guest;\n                state.error = null;\n            })\n            .addCase(getMessages.rejected, (state, action) => {\n                state.loading = false;\n                state.error = action.error.message as string;\n            });\n    },\n});\n\nexport const selectMessageState = (state: RootState) => state.messages;\nexport const selectLoading = (state: RootState) => state.messages.loading;\nexport const selectError = (state: RootState) => state.messages.error;\n//export const selectRoom = (state: RootState) => state.messages.chatRoom;\n//export const selectMessages = (state: RootState) => state.messages.messages;\n//export const selectCreator = (state: RootState) => state.messages.host;\n//export const selectGuest = (state: RootState) => state.messages.guest;\nexport const selectChatRoom = (state: RootState) => state.messages.chatRooms;\n\nexport default messagesSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}